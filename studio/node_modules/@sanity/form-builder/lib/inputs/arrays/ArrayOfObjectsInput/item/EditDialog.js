"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditDialog = EditDialog;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _presence2 = require("@sanity/base/presence");

var _FormBuilderInput = require("../../../../FormBuilderInput");

var _PopoverDialog = require("../../../../transitional/PopoverDialog");

var _helpers = require("./helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function EditDialog(props) {
  var type = props.type,
      value = props.value,
      markers = props.markers,
      focusPath = props.focusPath,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onClose = props.onClose,
      onChange = props.onChange,
      readOnly = props.readOnly,
      filterField = props.filterField,
      referenceElement = props.referenceElement,
      presence = props.presence,
      dialogType = props.dialogType,
      compareValue = props.compareValue;
  var title = readOnly ? type.title || '' : "Edit ".concat(type.title || '');
  var childMarkers = (0, _react.useMemo)(() => markers.filter(marker => marker.path.length > 1), [markers]);
  var childPresence = (0, _react.useMemo)(() => presence.filter(_presence => _presence.path.length > 1), [presence]);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      boundaryElement = _useState2[0],
      setBoundaryElement = _useState2[1];

  var content = /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: boundaryElement
  }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    type: type,
    level: 0,
    value: (0, _helpers.isEmpty)(value) ? undefined : value,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    compareValue: compareValue,
    focusPath: focusPath,
    readOnly: readOnly || type.readOnly || false,
    markers: childMarkers,
    path: [{
      _key: value._key
    }],
    filterField: filterField,
    presence: childPresence
  }));

  if (dialogType === 'fullscreen') {
    return /*#__PURE__*/_react.default.createElement(_ui.Layer, null, /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      width: "auto",
      id: value._key,
      onClose: onClose,
      key: value._key,
      header: title
    }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
      margins: [0, 0, 1, 0]
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4,
      ref: setBoundaryElement
    }, content))));
  }

  if (dialogType === 'popover' || dialogType === 'fold') {
    if (dialogType === 'fold') {
      console.warn("The option named `editItem: \"fold\"` is no longer supported");
    }

    return /*#__PURE__*/_react.default.createElement(_PopoverDialog.PopoverDialog, {
      onClose: onClose,
      referenceElement: referenceElement,
      placement: "auto",
      title: title
    }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
      margins: [0, 0, 1, 0]
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      ref: setBoundaryElement
    }, content)));
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    width: 1,
    id: value._key,
    onClose: onClose,
    key: value._key,
    header: title
  }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4,
    ref: setBoundaryElement
  }, content)));
}